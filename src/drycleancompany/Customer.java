package drycleancompany;

import java.util.ArrayList;
import java.util.Date;


/**
 * This abstract class extends the User class and implements customerManagement interface.
 * @author İpek Gültekin
 */
public abstract class Customer extends User implements customerManagement{
    private Date registrationDate;
    private ArrayList<Order> orders;


    /**
     * Constructor to create a customer, and it calls the User's related constructor with super key.
     *
     * @param dateOfBirth  date of birth of
     * @param ID           ID of the customer
     * @param name         name
     * @param surname      surname
     */
    public Customer(Date dateOfBirth, int ID, String name, String surname) {
        super(dateOfBirth, ID, name, surname);
        this.orders = new ArrayList<>();
    }

    /**
     * Constructor to create a customer, and it calls the User's related constructor with super key.
     *
     * @param ID  ID of the customer
     * @param name  name
     * @param surname  surname
     */
    public Customer(int ID, String name, String surname) {
        super(ID, name, surname);
        this.orders = new ArrayList<>();
    }

    /**
     * Default Constructor
     */
    public Customer() {
        super();
        this.orders = new ArrayList<>();
    }

    /**
     * This method retrieves the most recent order and adds it to the customer's list of orders.
     */
    public void putOrder(){
        if(orders != null) {
            this.orders.add(orders.getLast());
        }
    }

    /**
     * Getter method for list of orders
     * @return orders
     */
    public ArrayList<Order> getOrders() {
        return orders;
    }

    /**
     * Setter method for list of orders
     * @param orders orders
     */
    public void setOrders(ArrayList<Order> orders) {
        this.orders = orders;
    }

    /**
     * Getter method for registration date
     * @return registrationDate
     */
    public Date getRegistrationDate() {
        return registrationDate;
    }

    /**
     * Setter method for registration date
     * @param registrationDate registrationDate
     */
    public void setRegistrationDate(Date registrationDate) {

        this.registrationDate = registrationDate;
    }

    /**
     * Compares the total income generated by this customer with another customer.
     *
     * @param o instance of Customer class's object
     * @return depend on the comparison
     */
    public int compareTo(Object o){
        if (o instanceof Customer otherCustomer) {
            double thisIncome = this.calculateTotalIncome();
            double otherIncome = otherCustomer.calculateTotalIncome();
            return Double.compare(thisIncome, otherIncome);
        }
        return 0;
    }

    /**
     * Returns a string representation of the Customer object.
     * @return A string representing the customer's details, including ID, name, surname,
     * registration date, and associated orders.
     */
    @Override
    public String toString() {
        return "Customer{" +
                "Customer ID=" + getID() +
                ", Customer Name='" + getName() + '\'' +
                ", Customer Surname='" + getSurname() + '\'' +
                ", Registration Date=" + registrationDate +
                ", Orders=" + orders +
                '}';
    }
}
