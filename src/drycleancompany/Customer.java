package drycleancompany;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;

/**
 * This abstract class extends the User class and implements customerManagement interface.
 * Represents a customer with registration date and a list of orders.
 * @author İpek Gültekin
 */
public abstract class Customer extends User implements customerManagement, Serializable {
    private static final long serialVersionUID = 1L;

    private Date registrationDate;
    private transient ArrayList<Order> orders;

    /**
     * Constructor to create a customer.
     *
     * @param dateOfBirth Date of birth of the customer.
     * @param ID          ID of the customer.
     * @param name        Name of the customer.
     * @param surname     Surname of the customer.
     */
    public Customer(Date dateOfBirth, int ID, String name, String surname) {
        super(dateOfBirth, ID, name, surname);
        this.orders = new ArrayList<>();
    }

    /**
     * Constructor to create a customer with only ID, name, and surname.
     *
     * @param ID      ID of the customer.
     * @param name    Name of the customer.
     * @param surname Surname of the customer.
     */
    public Customer(int ID, String name, String surname) {
        super(ID, name, surname);
        this.orders = new ArrayList<>();
    }

    /**
     * Default Constructor.
     */
    public Customer() {
        super();
        this.orders = new ArrayList<>();
    }

    /**
     * Adds the most recent order to the customer's list of orders.
     */
    public void putOrder() {
        if (orders != null && !orders.isEmpty()) {
            this.orders.add(orders.get(orders.size() - 1));
        }
    }

    /**
     * Getter for the list of orders.
     *
     * @return List of orders.
     */
    public ArrayList<Order> getOrders() {
        if (orders == null) {
            orders = new ArrayList<>();
        }
        return orders;
    }

    /**
     * Setter for the list of orders.
     *
     * @param orders List of orders.
     */
    public void setOrders(ArrayList<Order> orders) {
        this.orders = orders != null ? orders : new ArrayList<>();
    }

    /**
     * Getter for registration date.
     *
     * @return Registration date or null if not set.
     */
    public java.sql.Date getRegistrationDate() {
        return registrationDate != null ? new java.sql.Date(registrationDate.getTime()) : null;
    }

    /**
     * Setter for registration date.
     *
     * @param registrationDate Registration date.
     */
    public void setRegistrationDate(Date registrationDate) {
        this.registrationDate = registrationDate != null ? new java.util.Date(registrationDate.getTime()) : null;
    }

    /**
     * Compares the total income generated by this customer with another customer.
     *
     * @param o Object to compare with.
     * @return Comparison result: 1 (greater), 0 (equal), or -1 (lesser).
     */
    public int compareTo(Object o) {
        if (o instanceof Customer otherCustomer) {
            return Double.compare(this.calculateTotalIncome(), otherCustomer.calculateTotalIncome());
        }
        return 0;
    }

    /**
     * Gets the customer's ID.
     *
     * @return Customer ID.
     */
    public int getCustomerID() {
        return this.getID();
    }

    /**
     * Determines the type of customer.
     *
     * @return 's' for subscribed, 'u' for unsubscribed, or 'N' for unknown.
     */
    public char getType() {
        if (this instanceof Subscribed) {
            return 'S';
        } else if (this instanceof UnSubscribed) {
            return 'U';
        }
        return 'N';
    }

    @Override
    public java.sql.Date getDateOfBirth() {
        return super.getDateOfBirth() != null ? new java.sql.Date(super.getDateOfBirth().getTime()) : null;
    }

    @Override
    public void setDateOfBirth(Date dateOfBirth) {
        super.setDateOfBirth(dateOfBirth != null ? new java.util.Date(dateOfBirth.getTime()) : null);
    }

    /**
     * Returns a string representation of the Customer object.
     *
     * @return String representation of the customer's details.
     */
    @Override
    public String toString() {
        return "Customer{" +
                "Customer ID=" + getID() +
                ", Customer Name='" + getName() + '\'' +
                ", Customer Surname='" + getSurname() + '\'' +
                ", Registration Date=" + (registrationDate != null ? registrationDate : "Not set") +
                ", Orders Count=" + (orders != null ? orders.size() : 0) +
                '}';
    }
}
